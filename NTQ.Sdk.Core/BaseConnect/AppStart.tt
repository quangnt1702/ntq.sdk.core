<#@ template language="C#" hostspecific="true"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
using CoOrder.BusinessLogic.AutoMapperModule;
using AutoMapper;
using Microsoft.Extensions.DependencyInjection;

namespace CoOrder.API.AppStart
{
    public static class AutoMapperConfig
    {
        public static void ConfigureAutoMapper(this IServiceCollection services)
        {
            MapperConfiguration mapperConfiguration = new MapperConfiguration(mc =>
            {
<#
    var files = GetCsvFileNames();
    var enumerable = files.ToList();
    foreach (var file in enumerable.Where(w => !w.EndsWith("Context")))
    {
#>
                mc.Config<#= file #>();
<#
    }
#>
            });
            IMapper mapper = mapperConfiguration.CreateMapper();
            services.AddSingleton(mapper);
        }
    }
}
<#
    SaveOutput("AutoMapperConfig.cs", "../AppStart");
#>

<#+
    private void SaveOutput(string outputFileName, string folder)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        if (!Directory.Exists(Path.Combine(templateDirectory ?? string.Empty, folder)))
        {
            Directory.CreateDirectory(Path.Combine(templateDirectory ?? string.Empty, folder));
        }
        string outputFilePath = Path.Combine(templateDirectory ?? string.Empty, folder, outputFileName);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
        GenerationEnvironment.Clear();
    }

    private IEnumerable<string> GetCsvFileNames()
    {
        var currentPath = Host.ResolvePath(string.Empty);
        var path = Path.Combine(currentPath, @"..\..\CoOrder.BusinessLogic\AutoMapperModule");
        return Directory.GetFiles(path, "*.cs").Select(s => new FileInfo(s).Name.Replace(".cs", ""));
    }
#>